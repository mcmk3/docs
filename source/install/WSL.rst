Setting up Windows to use QIIME 2
---------------------------------

This section will demonstrate how to set up windows to allow QIIME 2 installation. Windows now allows users to install linux as a windows subsystem (WSL), the simplest way to use QIIME 2 on a machine with Windows OS is therefore to use this Windows subsystem for Linux.

Please see the `official windows tutorial <https://docs.microsoft.com/en-us/windows/wsl/install-win10>`__ to install WSL2. Then install an appropriate linux distribution e.g. the latest stable version of Ubuntu. Once installation is complete run ``sudo apt-get update`` and ``sudo apt-get upgrade`` to ensure everything is up to date.

Then install miniconda (or alternatively you could install Anaconda) using the following commands:

.. command-block::
    :no-exec:
    
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    bash Miniconda3-latest-Linux-x86_64.sh
    #once installation has completed
    conda init 

Restart the terminal to have changes take effect. Ensure you have the latest conda verstion and then create an environment to work in as follows:

.. command-block::
    :no-exec:
    
    conda update conda
    conda create --name <name of new environment>

Packages for your project can now be installed in this environment, keeping them separate from any other projects you may have, and ensuring that different dependencies do not clash. For instance, QIIME 2 can be installed into this environment as follows:
Navigate to :doc:`Natively installing QIIME 2 <native>` in these docs to find the link for the latest version of QIIME 2. Use this to download QIIME 2:

.. command-block::
    :no-exec:

    wget <link from QIIME 2 docs>
    conda env update --file <RELEASE-NAME>.yml

Or you can install QIIME 2 into a new environment by as follows:

.. command-block::
    :no-exec:

    wget <link from QIIME2 docs>
    conda env create -n <name of new environment> --file <RELEASENAME>.yml
    conda activate <name of new environment>

See also :doc:`native conda installation <native>` for more in-depth instructions. While it is not necessary for QIIME 2, if you wish to use other programmes with graphical interfaces to analyse or view data generated by QIIME 2 (e.g. R studio or Spyder), some further set up is required.

GUI server installation (optional)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In windows (not the subsystem) install an X server of choice, this section uses VcXsrv, an open source server. Once installed, open VcXsrv, choose multiple windows, set display number to 0, select next, next, tick disable access control, finish. All other options remain default. The programme will have to be launched once every time one restarts their computer. It then runs in background so that once it has been started GUIs can be used as long as the computer remains on. If you save a .config file then launching is as simple as double clicking said .config file.

Next, in the WSL run the following commands to obtain packages necessary for the subsystem to host GUI programmes:

.. command-block::
    :no-exec:
    
    sudo apt-get install libxcursor-dev
    sudo apt-get install alsa
    sudo apt install libegl1-mesa libegl1
    
You will also need to configure the subsystem, open the bashrc congif file:

.. command-block::
    :no-exec:
    
    nano ~/.bashrc

Move to the end of this document and type:

.. command-block::
    :no-exec:

    export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0
    export LIBGL_ALWAYS_INDIRECT=1

Then use ``CTRL X``, ``Y``, ``ENTER`` to save changes and leave. Close and re-open the terminal and you should now be able to launch GUI programmes, such as R studio, from the WSL (presuming that you have started the X server).

**References**

1. https://docs.microsoft.com/en-us/windows/wsl/install-win10

2. https://wiki.ubuntu.com/WSL

3. https://stackoverflow.com/questions/61110603/how-to-set-up-working-x11-forwarding-on-wsl2
 
4. https://medium.com/@macasaetjohn/setting-up-a-spyder-environment-with-wsl-bb83716a44f3
